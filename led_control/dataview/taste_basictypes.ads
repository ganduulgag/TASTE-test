-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
USE adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE TASTE_BasicTypes with SPARK_Mode
IS


SUBTYPE asn1SccT_Int32 is adaasn1rtl.Asn1Int range -2147483648 .. 2147483647;


function asn1SccT_Int32_Equal(val1, val2: in asn1SccT_Int32) return Boolean;

function asn1SccT_Int32_Init return asn1SccT_Int32;

ERR_T_INT32:CONSTANT INTEGER := 1; -- 
FUNCTION asn1SccT_Int32_IsConstraintValid(val : in asn1SccT_Int32) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_T_INT32:CONSTANT INTEGER := 2; 
asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING:CONSTANT INTEGER := 4;
asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING:CONSTANT INTEGER := 32;

SUBTYPE asn1SccT_Int32_uPER_bit_array_range is Natural range 1..asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING;
SUBTYPE asn1SccT_Int32_uPER_bit_array is adaasn1rtl.BitArray(asn1SccT_Int32_uPER_bit_array_range);

TYPE asn1SccT_Int32_uPER_Stream IS RECORD
    K	: Natural;
    DataLen	: Natural;
    Data : asn1SccT_Int32_uPER_bit_array;
end RECORD;

procedure asn1SccT_Int32_Encode(val:in asn1SccT_Int32; Stream : OUT asn1SccT_Int32_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_Int32_Encode_aux(val:in asn1SccT_Int32; S : in out adaasn1rtl.BitArray; K : in out Natural; result : OUT adaasn1rtl.ASN1_RESULT)
;

ERR_UPER_DECODE_T_INT32:CONSTANT INTEGER := 3; 
procedure asn1SccT_Int32_Decode(val: out asn1SccT_Int32; Stream : IN asn1SccT_Int32_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_Int32_Decode_aux(val: out asn1SccT_Int32; S : in adaasn1rtl.BitArray; K : in out adaasn1rtl.DECODE_PARAMS; result : OUT adaasn1rtl.ASN1_RESULT)
;
SUBTYPE asn1SccT_UInt32 is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function asn1SccT_UInt32_Equal(val1, val2: in asn1SccT_UInt32) return Boolean;

function asn1SccT_UInt32_Init return asn1SccT_UInt32;

ERR_T_UINT32:CONSTANT INTEGER := 8; -- 
FUNCTION asn1SccT_UInt32_IsConstraintValid(val : in asn1SccT_UInt32) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_T_UINT32:CONSTANT INTEGER := 9; 
asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING:CONSTANT INTEGER := 4;
asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING:CONSTANT INTEGER := 32;

SUBTYPE asn1SccT_UInt32_uPER_bit_array_range is Natural range 1..asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING;
SUBTYPE asn1SccT_UInt32_uPER_bit_array is adaasn1rtl.BitArray(asn1SccT_UInt32_uPER_bit_array_range);

TYPE asn1SccT_UInt32_uPER_Stream IS RECORD
    K	: Natural;
    DataLen	: Natural;
    Data : asn1SccT_UInt32_uPER_bit_array;
end RECORD;

procedure asn1SccT_UInt32_Encode(val:in asn1SccT_UInt32; Stream : OUT asn1SccT_UInt32_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_UInt32_Encode_aux(val:in asn1SccT_UInt32; S : in out adaasn1rtl.BitArray; K : in out Natural; result : OUT adaasn1rtl.ASN1_RESULT)
;

ERR_UPER_DECODE_T_UINT32:CONSTANT INTEGER := 10; 
procedure asn1SccT_UInt32_Decode(val: out asn1SccT_UInt32; Stream : IN asn1SccT_UInt32_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_UInt32_Decode_aux(val: out asn1SccT_UInt32; S : in adaasn1rtl.BitArray; K : in out adaasn1rtl.DECODE_PARAMS; result : OUT adaasn1rtl.ASN1_RESULT)
;
SUBTYPE asn1SccT_Int8 is adaasn1rtl.Asn1Int range -128 .. 127;


function asn1SccT_Int8_Equal(val1, val2: in asn1SccT_Int8) return Boolean;

function asn1SccT_Int8_Init return asn1SccT_Int8;

ERR_T_INT8:CONSTANT INTEGER := 15; -- 
FUNCTION asn1SccT_Int8_IsConstraintValid(val : in asn1SccT_Int8) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_T_INT8:CONSTANT INTEGER := 16; 
asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING:CONSTANT INTEGER := 1;
asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING:CONSTANT INTEGER := 8;

SUBTYPE asn1SccT_Int8_uPER_bit_array_range is Natural range 1..asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING;
SUBTYPE asn1SccT_Int8_uPER_bit_array is adaasn1rtl.BitArray(asn1SccT_Int8_uPER_bit_array_range);

TYPE asn1SccT_Int8_uPER_Stream IS RECORD
    K	: Natural;
    DataLen	: Natural;
    Data : asn1SccT_Int8_uPER_bit_array;
end RECORD;

procedure asn1SccT_Int8_Encode(val:in asn1SccT_Int8; Stream : OUT asn1SccT_Int8_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_Int8_Encode_aux(val:in asn1SccT_Int8; S : in out adaasn1rtl.BitArray; K : in out Natural; result : OUT adaasn1rtl.ASN1_RESULT)
;

ERR_UPER_DECODE_T_INT8:CONSTANT INTEGER := 17; 
procedure asn1SccT_Int8_Decode(val: out asn1SccT_Int8; Stream : IN asn1SccT_Int8_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_Int8_Decode_aux(val: out asn1SccT_Int8; S : in adaasn1rtl.BitArray; K : in out adaasn1rtl.DECODE_PARAMS; result : OUT adaasn1rtl.ASN1_RESULT)
;
SUBTYPE asn1SccT_UInt8 is adaasn1rtl.Asn1UInt range 0 .. 255;


function asn1SccT_UInt8_Equal(val1, val2: in asn1SccT_UInt8) return Boolean;

function asn1SccT_UInt8_Init return asn1SccT_UInt8;

ERR_T_UINT8:CONSTANT INTEGER := 22; -- 
FUNCTION asn1SccT_UInt8_IsConstraintValid(val : in asn1SccT_UInt8) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_T_UINT8:CONSTANT INTEGER := 23; 
asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING:CONSTANT INTEGER := 1;
asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING:CONSTANT INTEGER := 8;

SUBTYPE asn1SccT_UInt8_uPER_bit_array_range is Natural range 1..asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING;
SUBTYPE asn1SccT_UInt8_uPER_bit_array is adaasn1rtl.BitArray(asn1SccT_UInt8_uPER_bit_array_range);

TYPE asn1SccT_UInt8_uPER_Stream IS RECORD
    K	: Natural;
    DataLen	: Natural;
    Data : asn1SccT_UInt8_uPER_bit_array;
end RECORD;

procedure asn1SccT_UInt8_Encode(val:in asn1SccT_UInt8; Stream : OUT asn1SccT_UInt8_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_UInt8_Encode_aux(val:in asn1SccT_UInt8; S : in out adaasn1rtl.BitArray; K : in out Natural; result : OUT adaasn1rtl.ASN1_RESULT)
;

ERR_UPER_DECODE_T_UINT8:CONSTANT INTEGER := 24; 
procedure asn1SccT_UInt8_Decode(val: out asn1SccT_UInt8; Stream : IN asn1SccT_UInt8_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_UInt8_Decode_aux(val: out asn1SccT_UInt8; S : in adaasn1rtl.BitArray; K : in out adaasn1rtl.DECODE_PARAMS; result : OUT adaasn1rtl.ASN1_RESULT)
;
SUBTYPE asn1SccT_Boolean is adaasn1rtl.Asn1Boolean;


function asn1SccT_Boolean_Equal(val1, val2: in asn1SccT_Boolean) return Boolean;

function asn1SccT_Boolean_Init return asn1SccT_Boolean;

ERR_T_BOOLEAN:CONSTANT INTEGER := 29; -- 
FUNCTION asn1SccT_Boolean_IsConstraintValid(val : in asn1SccT_Boolean) return adaasn1rtl.ASN1_RESULT;

ERR_UPER_ENCODE_T_BOOLEAN:CONSTANT INTEGER := 30; 
asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING:CONSTANT INTEGER := 1;
asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING:CONSTANT INTEGER := 1;

SUBTYPE asn1SccT_Boolean_uPER_bit_array_range is Natural range 1..asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING;
SUBTYPE asn1SccT_Boolean_uPER_bit_array is adaasn1rtl.BitArray(asn1SccT_Boolean_uPER_bit_array_range);

TYPE asn1SccT_Boolean_uPER_Stream IS RECORD
    K	: Natural;
    DataLen	: Natural;
    Data : asn1SccT_Boolean_uPER_bit_array;
end RECORD;

procedure asn1SccT_Boolean_Encode(val:in asn1SccT_Boolean; Stream : OUT asn1SccT_Boolean_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_Boolean_Encode_aux(val:in asn1SccT_Boolean; S : in out adaasn1rtl.BitArray; K : in out Natural; result : OUT adaasn1rtl.ASN1_RESULT)
;

ERR_UPER_DECODE_T_BOOLEAN:CONSTANT INTEGER := 31; 
procedure asn1SccT_Boolean_Decode(val: out asn1SccT_Boolean; Stream : IN asn1SccT_Boolean_uPER_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
procedure asn1SccT_Boolean_Decode_aux(val: out asn1SccT_Boolean; S : in adaasn1rtl.BitArray; K : in out adaasn1rtl.DECODE_PARAMS; result : OUT adaasn1rtl.ASN1_RESULT)
;

 

private
   --# hide TASTE_BasicTypes;


END TASTE_BasicTypes;