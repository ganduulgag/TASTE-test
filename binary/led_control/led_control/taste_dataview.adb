-- Code automatically generated by asn1scc tool
WITH adaasn1rtl;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;


PACKAGE BODY TASTE_Dataview with SPARK_Mode IS




function asn1SccTASTE_Boolean_Equal(val1, val2: in asn1SccTASTE_Boolean)
    return Boolean 
is
begin
	return val1 = val2;

end asn1SccTASTE_Boolean_Equal;

function asn1SccTASTE_Boolean_Init return asn1SccTASTE_Boolean
is
    val: asn1SccTASTE_Boolean;
begin
    val := FALSE;
    return val;
end asn1SccTASTE_Boolean_Init;

FUNCTION asn1SccTASTE_Boolean_IsConstraintValid(val : in asn1SccTASTE_Boolean) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => TRUE, ErrorCode => ERR_TASTE_BOOLEAN);
    RETURN ret;
END asn1SccTASTE_Boolean_IsConstraintValid;



function asn1SccMyInteger_Equal(val1, val2: in asn1SccMyInteger)
    return Boolean 
is
begin
	return val1 = val2;

end asn1SccMyInteger_Equal;

function asn1SccMyInteger_Init return asn1SccMyInteger
is
    val: asn1SccMyInteger;
begin
    val := 0;
    return val;
end asn1SccMyInteger_Init;

FUNCTION asn1SccMyInteger_IsConstraintValid(val : in asn1SccMyInteger) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 255), ErrorCode => ERR_MYINTEGER);
    RETURN ret;
END asn1SccMyInteger_IsConstraintValid;



function asn1SccT_Uint16_Equal(val1, val2: in asn1SccT_Uint16)
    return Boolean 
is
begin
	return val1 = val2;

end asn1SccT_Uint16_Equal;

function asn1SccT_Uint16_Init return asn1SccT_Uint16
is
    val: asn1SccT_Uint16;
begin
    val := 0;
    return val;
end asn1SccT_Uint16_Init;

FUNCTION asn1SccT_Uint16_IsConstraintValid(val : in asn1SccT_Uint16) return adaasn1rtl.ASN1_RESULT
IS
    ret : adaasn1rtl.ASN1_RESULT;
BEGIN
    ret := adaasn1rtl.ASN1_RESULT'(Success => (val <= 65535), ErrorCode => ERR_T_UINT16);
    RETURN ret;
END asn1SccT_Uint16_IsConstraintValid;


 

END TASTE_Dataview;